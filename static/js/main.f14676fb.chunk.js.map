{"version":3,"sources":["components/Icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","isGameOver","setIsGameOver","winMessage","setWinMessage","changeItem","itemNumber","toast","type","position","includes","Container","onClick","map","item","index","Card","color","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","Fragment","document","getElementById"],"mappings":"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","file":"static/js/main.f14676fb.chunk.js","sourcesContent":["import React from \"react\";\nimport { FaTimes, FaPen, FaRegCircle } from \"react-icons/fa\";\n\nconst Icon = ({ name }) => {\n  switch (name) {\n    case \"circle\":\n      return <FaRegCircle className=\"icons\" />;\n    case \"cross\":\n      return <FaTimes className=\"icons\" />;\n    default:\n      return <FaPen className=\"icons\" />;\n  }\n};\n\nexport default Icon;\n","import React, { useState } from \"react\";\nimport Icon from \"./components/Icon\";\n\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nimport { Card, CardBody, Container } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\n\nconst itemArray = new Array(9).fill(null);\n\nconst App = () => {\n  const [isCross, setIsCross] = useState(false);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [winMessage, setWinMessage] = useState(\"\");\n\n  const reloadGame = () => {\n    setIsCross(false);\n    setIsGameOver(false);\n    setWinMessage(\"\");\n    itemArray.fill(null, 0, 9);\n  };\n\n  const checkIsWinner = () => {\n    //  checking  winner of the game\n    if (\n      itemArray[0] === itemArray[1] &&\n      itemArray[0] === itemArray[2] &&\n      itemArray[0] !== null\n    ) {\n      setWinMessage(`${itemArray[0]} won`);\n    } else if (\n      itemArray[3] !== null &&\n      itemArray[3] === itemArray[4] &&\n      itemArray[4] === itemArray[5]\n    ) {\n      setWinMessage(`${itemArray[3]} won`);\n    } else if (\n      itemArray[6] !== null &&\n      itemArray[6] === itemArray[7] &&\n      itemArray[7] === itemArray[8]\n    ) {\n      setWinMessage(`${itemArray[6]} won`);\n    } else if (\n      itemArray[0] !== null &&\n      itemArray[0] === itemArray[3] &&\n      itemArray[3] === itemArray[6]\n    ) {\n      setWinMessage(`${itemArray[0]} won`);\n    } else if (\n      itemArray[1] !== null &&\n      itemArray[1] === itemArray[4] &&\n      itemArray[4] === itemArray[7]\n    ) {\n      setWinMessage(`${itemArray[1]} won`);\n    } else if (\n      itemArray[2] !== null &&\n      itemArray[2] === itemArray[5] &&\n      itemArray[5] === itemArray[8]\n    ) {\n      setWinMessage(`${itemArray[2]} won`);\n    } else if (\n      itemArray[0] !== null &&\n      itemArray[0] === itemArray[4] &&\n      itemArray[4] === itemArray[8]\n    ) {\n      setWinMessage(`${itemArray[0]} won`);\n    } else if (\n      itemArray[2] !== null &&\n      itemArray[2] === itemArray[4] &&\n      itemArray[4] === itemArray[6]\n    ) {\n      setWinMessage(`${itemArray[2]} won`);\n    } else if (!itemArray.includes(null)) {\n      setWinMessage(`Game Over`);\n      setIsGameOver(true);\n      toast(\"Game Over\", { type: \"error\", position: \"top-right\" });\n    }\n  };\n\n  const changeItem = (itemNumber) => {\n    if (winMessage) {\n      return toast(winMessage, {\n        type: isGameOver ? \"error\" : \"success\",\n        position: \"top-right\",\n      });\n    }\n\n    if (itemArray[itemNumber] === null) {\n      itemArray[itemNumber] = isCross ? \"cross\" : \"circle\";\n      setIsCross(!isCross);\n    } else {\n      return toast(\"already filled\", { type: \"error\", position: \"top-right\" });\n    }\n\n    checkIsWinner();\n  };\n\n  return (\n    <Container className=\"p-5\">\n      <ToastContainer position=\"bottom-center\" />\n      <div className=\"row\">\n        <div className=\"col-md-6 offset-md-3\">\n          {winMessage ? (\n            <div className=\"mb-2 mt-2\">\n              <h1\n                className={`text-${\n                  isGameOver ? \"danger\" : \"success\"\n                } text-uppercase text-center`}\n              >\n                {winMessage}\n              </h1>\n              <button\n                className=\"btn btn-success btn-lg btn-block my-5 w-100\"\n                onClick={reloadGame}\n              >\n                Reload the game\n              </button>\n            </div>\n          ) : (\n            <h1 className=\"text-center text-warning my-5\">\n              {isCross ? \"Cross\" : \"Circle\"} turns\n            </h1>\n          )}\n          <div className=\"grid\">\n            {itemArray.map((item, index) => (\n              <Card\n                key={index}\n                color=\"warning\"\n                onClick={() => changeItem(index)}\n              >\n                <CardBody className=\"box\">\n                  <Icon name={item} />\n                </CardBody>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}